name: CI/CD Pipeline in Deploy AWS

on:
  push:
    branches:
      - "main"
      - "release/**"
  pull_request:
    branches:
      - "main"
      - "release/**"

jobs:
  build:
    runs-on: ubuntu-latest

    env: # ✅ Define shared environment variables once
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
      NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
      EMAIL_SERVER_HOST: ${{ secrets.EMAIL_SERVER_HOST }}
      EMAIL_SERVER_PORT: ${{ secrets.EMAIL_SERVER_PORT }}
      EMAIL_SERVER_USER: ${{ secrets.EMAIL_SERVER_USER }}
      EMAIL_SERVER_PASSWORD: ${{ secrets.EMAIL_SERVER_PASSWORD }}
      EMAIL_FROM: ${{ secrets.EMAIL_FROM }}
      EMAIL_SERVER_SECURE: ${{ secrets.EMAIL_SERVER_SECURE }}
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🧰 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: v22.9.0

      - name: 📥 Install dependencies
        run: npm install

      - name: 🔄 Prisma migrate
        run: npx prisma migrate dev --name init

      - name: 🏗️ Build App
        run: npm run build

  deploy:
    runs-on: ubuntu-latest
    needs: build # ✅ Wait for build to finish

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Set up SSH key
        env:
          AWS_EC2_SSH_PRIVATE_KEY: ${{ secrets.AWS_EC2_SSH_PRIVATE_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          mkdir -p ~/.ssh
          echo "$AWS_EC2_SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "$EC2_HOST" >> ~/.ssh/known_hosts

      - name: 🚀 Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@"$EC2_HOST" << 'EOF'
            cd /home/ubuntu/application/lenslogy
            git pull origin main
            npm install
            npm run build
            pm2 reload 0 || pm2 start npm --name "lenslogy" -- start
          EOF
