// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Language {
    en
    bn
}

enum Role {
    SUPER_ADMIN
    ADMIN
    AUTHOR
}

model User {
    id            String      @id @default(cuid())
    name          String
    email         String      @unique
    emailVerified Boolean     @default(false)
    password      String
    designation   String?
    role          Role        @default(AUTHOR)
    avatar        String?
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt
    articles      Article[]
    accounts      Account[]
    sessions      Session[]
    resetToken    ResetToken?
}

// it's need for  reset password
model ResetToken {
    id        String   @id @default(cuid())
    token     String   @unique
    expires   DateTime
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String   @unique
    createdAt DateTime @default(now())
}

//it's need for Manages external provider accounts (OAuth). Handles sign-in with Google, GitHub, Facebook, etc.
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

// it's need for  Stores all active login sessions for the user.
model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Article {
    id           String             @id @default(cuid())
    baseId       String?
    baseArticle  Article?           @relation("BaseArticle", fields: [baseId], references: [id])
    translations Article[]          @relation("BaseArticle")
    title        String
    excerpt      String
    content      String
    image        String
    category     String
    authorId     String
    author       User               @relation(fields: [authorId], references: [id])
    date         DateTime           @default(now())
    tags         String[]
    lang         Language
    attachment   ArticleAttachment?
    Category     Category?          @relation(fields: [categoryId], references: [id])
    categoryId   String?

    @@unique([baseId, lang])
}

model ArticleAttachment {
    id        String  @id @default(cuid())
    views     String
    likes     String
    ipAddress String
    articleId String  @unique
    article   Article @relation(fields: [articleId], references: [id])
}

model Category {
    id       String    @id @default(cuid())
    baseId   String?
    name     String    @unique
    lang     Language
    articles Article[]

    @@unique([lang, baseId])
}
